// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Block.pbobjc.h"
 #import "Primitive.pbobjc.h"
 #import "Transaction.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - BlockRoot

@implementation BlockRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BlockRoot_FileDescriptor

static GPBFileDescriptor *BlockRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"iroha.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Block_v1

@implementation Block_v1

@dynamic hasPayload, payload;
@dynamic signaturesArray, signaturesArray_Count;

typedef struct Block_v1__storage_ {
  uint32_t _has_storage_[1];
  Block_v1_Payload *payload;
  NSMutableArray *signaturesArray;
} Block_v1__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(Block_v1_Payload),
        .number = Block_v1_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block_v1__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signaturesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = Block_v1_FieldNumber_SignaturesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block_v1__storage_, signaturesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block_v1 class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block_v1__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Block_v1_Payload

@implementation Block_v1_Payload

@dynamic transactionsArray, transactionsArray_Count;
@dynamic txNumber;
@dynamic height;
@dynamic prevBlockHash;
@dynamic createdTime;
@dynamic rejectedTransactionsHashesArray, rejectedTransactionsHashesArray_Count;

typedef struct Block_v1_Payload__storage_ {
  uint32_t _has_storage_[1];
  uint32_t txNumber;
  NSMutableArray *transactionsArray;
  NSString *prevBlockHash;
  NSMutableArray *rejectedTransactionsHashesArray;
  uint64_t height;
  uint64_t createdTime;
} Block_v1_Payload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = Block_v1_Payload_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block_v1_Payload__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "txNumber",
        .dataTypeSpecific.className = NULL,
        .number = Block_v1_Payload_FieldNumber_TxNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block_v1_Payload__storage_, txNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = Block_v1_Payload_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Block_v1_Payload__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "prevBlockHash",
        .dataTypeSpecific.className = NULL,
        .number = Block_v1_Payload_FieldNumber_PrevBlockHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Block_v1_Payload__storage_, prevBlockHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdTime",
        .dataTypeSpecific.className = NULL,
        .number = Block_v1_Payload_FieldNumber_CreatedTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Block_v1_Payload__storage_, createdTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "rejectedTransactionsHashesArray",
        .dataTypeSpecific.className = NULL,
        .number = Block_v1_Payload_FieldNumber_RejectedTransactionsHashesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Block_v1_Payload__storage_, rejectedTransactionsHashesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block_v1_Payload class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block_v1_Payload__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Block_v1)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Block

@implementation Block

@dynamic blockVersionOneOfCase;
@dynamic blockV1;

typedef struct Block__storage_ {
  uint32_t _has_storage_[2];
  Block_v1 *blockV1;
} Block__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockV1",
        .dataTypeSpecific.className = GPBStringifySymbol(Block_v1),
        .number = Block_FieldNumber_BlockV1,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Block__storage_, blockV1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Block class]
                                     rootClass:[BlockRoot class]
                                          file:BlockRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "blockVersion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Block_ClearBlockVersionOneOfCase(Block *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
